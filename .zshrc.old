#プロンプト
autoload -U promptinit
promptinit
#PROMPT='%F{yellow}%n@%d$%f '
#コマンドが失敗すると目玉が飛びでる
# function precmd_func1() {
    # if [ $? -eq 0 ]; then
        # RPROMPT='%F{yellow}彡(^)(^)%f'
    # else
        # RPROMPT='%F{yellow}彡(ﾟ)(ﾟ)%f'
    # fi
# }
# autoload -Uz add-zsh-hook
# add-zsh-hook precmd precmd_func1

#RPROMPT='[%m]'
#RPROMPT='[%d]'
#zshプロンプト
function zle-line-init zle-keymap-select {
    case $KEYMAP in
        vicmd)
        PROMPT='%F{yellow}%d%f%F{green}:%f[%F{red}NOR%f]%F{yellow}$%f '
        ;;
        main|viins)
        PROMPT='%F{yellow}%d%f%F{green}:%f[%F{blue}INS%f]%F{yellow}$%f '
        ;;
        vivis)
        PROMPT='%F{yellow}%d%f%F{green}:%f[%F{green}VIS%f]%F{yellow}$%f '
        ;;
    esac
    zle reset-prompt
}
zle -N zle-line-init 
zle -N zle-keymap-select
source ~/.zsh/zsh-vimode-visual/zsh-vimode-visual.zsh
#=============================
# source zsh-syntax-highlighting
#=============================
if [ -f ~/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]; then
  source ~/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
fi

#case $TERM in
#    linux   ) LANG=C;;
#    *       ) LANG=ja_JP.UTF-8;;
#esac


# Only load Liquid Prompt in interactive shells, not from a script or from scp
# [[ $- = *i* ]] && source ~/.zsh/liquidprompt/liquidprompt

if [ -f $HOME/.local/bin/virtualenvwrapper.sh ]; then
    export WORKON_HOME=$HOME/env
    source $HOME/.local/bin/virtualenvwrapper.sh
fi



#自動補完
autoload -U compinit
compinit
zstyle ':completion:*:default' menu select=1

#スペルミス訂正

if [ -f /home/default/etc/zshrc ] ; then
    . /home/default/etc/zshrc
fi

# コマンド(含内部コマンド)入力中にマニュアルを表示できる：M-h
[ -n "`alias run-help`" ] && unalias run-help
autoload -U run-help

umask 002

# alias
if [ -f ~/.zaliases ] ; then
    source ~/.zaliases
fi

### prompt
setopt prompt_subst
PROMPTCOLOR=31
ESC=$(print -Pn '\e')
BELL=$(print -Pn '\a')

# タイトルの設定
case $TERM in
dumb|emacs|sun) unset XTITLE ;;
vt100|[Exk]term*|rxvt|cygwin)
	XTITLE=$ESC']2;$TERM %n@%m:%~'$BELL$ESC']1;%m:%.'$BELL
;;
screen)	XTITLE=$ESC'k%n@%m:%.'$ESC\\ ;;
esac

unset XTITLE
unset ESC
unset BELL

# Some environment variables
export HISTFILE=${HOME}/.zsh_history
export HISTSIZE=10000
export SAVEHIST=10000
export USER=$USERNAME
export HOSTNAME=$HOST

### bindkey
bindkey -v             # vi key bindings
#bindkey -e               # emacs key bindings

## Bindkey you may think it's usefull
bindkey ' ' magic-space  # also do history expansino on space
bindkey -s "^xs" '\C-e"\C-asu -c "'
#bindkey -s "^xd" "$(date '+-%d_%b')"
bindkey -s "^xd" "$(date '+-%Y%m%d')"
#bindkey -s "^xf" "$(date '+-%D'|sed 's|/||g')"
bindkey -s "^xp" "\$(pwd\)/"
bindkey -s "^xw" "\C-a \$(which \C-e\)\C-a"

# ctrl+j で コマンドの途中からヒストリを呼び出す
autoload history-search-end
zle -N history-beginning-search-backward-end history-search-end
bindkey "^J" history-beginning-search-backward-end

if ( which dircolors >& /dev/null ); then
    if [ -f ~/.dircolors ] ; then
	eval `dircolors --sh ~/.dircolors`
    fi
    export LS_COLORS="${LS_COLORS}:*~=01;42:*#=01;42:*%=01;42"
else

# lsの色の設定
export LS_COLORS="\
*~=32;1:*#=32;1:*%=32;1:\
*README=31;4:*eadme=31;4:\
*.c=31:*.cc=31:*.cpp=31:*.C=31:*.cxx=31:*.h=31:*.o=32:*Makefile=31;43:\
*.html=31:*.htm=31:*.shtml=31:*.tex=31:*.lyx=31:*.mgp=31:*.pl=31:*.for=31:\
*.tar=01;31:*.tgz=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.rpm=01;31:*.lzh=01;31:*.zip=01;31:\
*.jpg=35:*.jpeg=35:*.gif=35:*.bmp=35:*.JPG=35:*.JPEG=35:*.GIF=35:*.BMP=35:\
*.eps=35:*.ppm=35:*.xbm=35:*.xpm=35:*.tif=35:\
*.mpg=01;37:*.mpeg=01;37:*.avi=01;37:*.MPG=01;37:*.MPEG=01;37:*.AVI=01;37:\
or=31;7"

fi

# Color completion.
export ZLS_COLORS=$LS_COLORS
zmodload -ui complist

###
# Set shell options

# 親プロセスが死んでも子プロセスが死なない
setopt nohup

# コマンドを訂正して下さる
setopt correct

# ファイル名も訂正して下さる
setopt correct_all

# 複数のタームで実行したコマンドのヒストリを共有化する
setopt share_history

# 直前と同じコマンドを入力した場合，ヒストリに入れない
setopt hist_ignore_dups

# コマンドの不要な空白を削除してヒストリに登録
setopt hist_reduce_blanks

# historyコマンドをヒストリに登録しない
setopt hist_no_store

# スペースで始まるコマンドをヒストリに登録しない
setopt hist_ignore_space

# コマンドの開始時間，経過時間をヒストリに保存
setopt extended_history  

# リダイレクション (>) で上書きしない
# >! で強制書き込み
# setopt no_clobber

# エラーの際のビープ音を鳴らさない
setopt no_beep

# 「#」 「~」 「^」を特殊文字として使用する
setopt extended_glob

# 補完候補をスッキリ表示
setopt list_packed

# cd を省略
setopt auto_cd

# 変数をディレクトリパスとして利用する
setopt auto_name_dirs

# cd コマンドで自動的にpushdする
setopt auto_pushd

# pushdの重複を防ぐ
setopt pushd_ignore_dups 

# popdでスタックの内容を表示しない
setopt pushd_silent

# 日本語のファイル名も補完リストで表示
setopt print_eight_bit

# rm で * を使う際に聞き返してこない
setopt rm_star_silent

# ファイル名中の数字を数字としてソート
setopt numeric_glob_sort

## TAB で順に補完候補を切り替える
## setopt auto_menu 
## TAB で順に補完候補を切り替えない
setopt noautomenu

setopt sh_word_split
setopt auto_param_keys
setopt no_list_ambiguous
#setopt dvorak

[[ $EMACS = t ]] && unsetopt zle

#zstyle ':completion:*:complete:ssh:*:hosts' hosts $hosts
# The following lines were added by compinstall

#zstyle ':completion:*' completer _oldlist _expand _complete _ignored _match _correct _approximate _prefix
zstyle ':completion:*' completer _oldlist  _expand _complete _ignored _match _prefix

zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' match-original both
zstyle ':completion:*' max-errors 1 numeric
zstyle ':completion:*' old-list _complete _approximate _correct _match _expand
zstyle ':completion:*' original true
zstyle :compinstall filename '~/.zshrc'
#zstyle ':completion:*:default' menu select=1
#大文字小文字無視
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# 日本語名の directory へ移動
ncd(){ builtin cd "`echo $@ | nkf -s`"}
nls(){ ls $@ | nkf}
# nxmms() { /usr/bin/xmms "`echo $@ | nkf -s`"}
# nplaympeg() { plaympeg "`echo $@ | nkf -s`"}

# export LM_LICENSE_FILE=1700@collabo4:7182@collabo4:1717@133.11.58.5:1709@karafuto

if [[ -n $SSH_CLIENT || -n $DISPLAY ]]; then
	LANG=ja_JP.utf-8 export LANG
	LC_ALL=ja_JP.utf-8 export LC_ALL
	XMODIFIERS=@im=fcitx export XMODIFIERS
fi

#.zshrc.local読み込み
[ -f ~/.zshrc.local ] && source ~/.zshrc.local


export PATH=$HOME/local/bin:$PATH
export PATH=$PATH:/opt/arduino-1.8.5/

#alias
#vmと打つことで、最近開いたファイルを呼び出せる
alias ls='ls --color=auto'
alias la='ls -la'
#i3lock
alias i3lock='i3lock -i ~/.wallpaper/i3lock.png'
#ranger-cd
alias ra='ranger-cd'
#wallpaper
alias chw='feh  --image-bg black --bg-max '/home/nagura/.wallpaper/pokemon/Fantasy__039078_.jpg'' 
#ssh
alias ssh='ssh -XC'
#ログインシェルにて
#i3起動
alias starti3='startx ~/.xinitrc i3'
#外部ディスプレイ接続
alias exdis='xrandr --output HDMI-2 --auto'
alias rdis='xrandr --output HDMI-2 --auto --right-of eDP-1'
#切断
alias offdis='xrandr --output HDMI-2 --off'
# cdの後にlsを実行
chpwd() { ls -a --color=auto }


#######ranger
#rangerのネストを防ぐ
function ranger() {
    if [ -z "$RANGER_LEVEL" ]; then
        /usr/bin/ranger $@
    else
        exit
    fi
}
#rangerで最後に抜けたディレクトリに自動でcd
# Compatible with ranger 1.4.2 through 1.7.*
#
# Automatically change the directory in bash after closing ranger
#
# This is a bash function for .bashrc to automatically change the directory to
# the last visited one after ranger quits.
# To undo the effect of this function, you can type "cd -" to return to the
# original directory.
# 
# On OS X 10 or later, replace `usr/bin/ranger` with `/usr/local/bin/ranger`.

function ranger-cd {
    tempfile="$(mktemp -t tmp.XXXXXX)"
    /usr/bin/ranger --choosedir="$tempfile" "${@:-$(pwd)}"
    test -f "$tempfile" &&
    if [ "$(cat -- "$tempfile")" != "$(echo -n `pwd`)" ]; then
        cd -- "$(cat "$tempfile")"
    fi
    rm -f -- "$tempfile"
}

# This binds Ctrl-O to ranger-cd:
#bindkey '"\C-o":"ranger-cd\C-m"'k
#peco
function peco-select-history() {
        # historyを番号なし、逆順、最初から表示。
        # 順番を保持して重複を削除。
        # カーソルの左側の文字列をクエリにしてpecoを起動
        # \nを改行に変換
    BUFFER="$(history -nr 1 | awk '!a[$0]++' | peco --query "$LBUFFER" | sed 's/\\n/\n/')"
    CURSOR=$#BUFFER             # カーソルを文末に移動
    zle -R -c                   # refres
}
zle -N peco-select-history
bindkey '^R' peco-select-history


function peco-select-history() {
    # historyを番号なし、逆順、最初から表示。
    # 順番を保持して重複を削除。
    # カーソルの左側の文字列をクエリにしてpecoを起動
    # \nを改行に変換
    BUFFER="$(history -nr 1 | awk '!a[$0]++' | peco --query "$LBUFFER" | sed 's/\\n/\n/')"
    CURSOR=$#BUFFER             # カーソルを文末に移動
    zle -R -c                   # refresh
}
zle -N peco-select-history
bindkey '^R' peco-select-history


##tmux
##login時にtmuxに入る
#function is_exists() { type "$1" >/dev/null 2>&1; return $?; }
#function is_osx() { [[ $OSTYPE == darwin* ]]; }
#function is_screen_running() { [ ! -z "$STY" ]; }
#function is_tmux_runnning() { [ ! -z "$TMUX" ]; }
#function is_screen_or_tmux_running() { is_screen_running || is_tmux_runnning; }
#function shell_has_started_interactively() { [ ! -z "$PS1" ]; }
#function is_ssh_running() { [ ! -z "$SSH_CONECTION" ]; }
#
#function tmux_automatically_attach_session()
#{
#    if is_screen_or_tmux_running; then
#        ! is_exists 'tmux' && return 1
#
#       # if is_tmux_runnning; then
#       #     echo "${fg_bold[red]} _____ __  __ _   ___  __ ${reset_color}"
#       #     echo "${fg_bold[red]}|_   _|  \/  | | | \ \/ / ${reset_color}"
#       #     echo "${fg_bold[red]}  | | | |\/| | | | |\  /  ${reset_color}"
#       #     echo "${fg_bold[red]}  | | | |  | | |_| |/  \  ${reset_color}"
#       #     echo "${fg_bold[red]}  |_| |_|  |_|\___//_/\_\ ${reset_color}"
#        if is_screen_running; then
#            echo "This is on screen."
#        fi
#    else
#        if shell_has_started_interactively && ! is_ssh_running; then
#            if ! is_exists 'tmux'; then
#                echo 'Error: tmux command not found' 2>&1
#                return 1
#            fi
#
#            if tmux has-session >/dev/null 2>&1 && tmux list-sessions | grep -qE '.*]$'; then
#                # detached session exists
#                tmux list-sessions
#                echo -n "Tmux: attach? (y/N/num) "
#                read
#                if [[ "$REPLY" =~ ^[Yy]$ ]] || [[ "$REPLY" == '' ]]; then
#                    tmux attach-session
#                    if [ $? -eq 0 ]; then
#                        echo "$(tmux -V) attached session"
#                        return 0
#                    fi
#                elif [[ "$REPLY" =~ ^[0-9]+$ ]]; then
#                    tmux attach -t "$REPLY"
#                    if [ $? -eq 0 ]; then
#                        echo "$(tmux -V) attached session"
#                        return 0
#                    fi
#                fi
#            fi
#
#            if is_osx && is_exists 'reattach-to-user-namespace'; then
#                # on OS X force tmux's default command
#                # to spawn a shell in the user's namespace
#                tmux_config=$(cat $HOME/.tmux.conf <(echo 'set-option -g default-command "reattach-to-user-namespace -l $SHELL"'))
#                tmux -f <(echo "$tmux_config") new-session && echo "$(tmux -V) created new session supported OS X"
#            else
#                tmux new-session && echo "tmux created new session"
#            fi
#        fi
#    fi
#}
#tmux_automatically_attach_session
#

# case "$TERM" in
        # rxvt-unicode-256color) sleep 0.000001 && transset -a 0.9 > /dev/null ;;
# esac
